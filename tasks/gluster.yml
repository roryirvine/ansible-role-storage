---

# Ensure that Glusterfs is installed
- name: Storage - gluster - Install repositories.
  apt_repository:
    repo: "ppa:gluster/glusterfs-3.7"

- name: Storage - gluster - Update APT cache
  apt:
    update_cache: yes
    cache_valid_time: 3600

- name: Storage - gluster - Install GlusterFS server
  apt:
    name: glusterfs-server
    state: installed

- name: Storage - gluster - Install GlusterFS client
  apt:
    name: glusterfs-client
    state: installed

# wait for gluster to Start

- name: Storage - gluster - List all storage servers
  debug: msg="{{ hostvars[item].ec2_launch_time }}"
  with_items: groups['tag_Name_storage_{{ env }}']
  register: s
  no_log: true
  when: env != "local" # TODO: fix local!
  run_once: true

- name: Storage - gluster - Write out age-sorted list of web servers
  debug:
    msg: "{{ s.results | sort(attribute='msg') |map(attribute='item') |list }}"
  register: s_sorted
  run_once: true
  when: env != "local"

- name: Storage - gluster - Assemble the Cluster and create the volumes
  gluster_volume:
    state: present
    name: "{{item}}"
    brick: "{{storage_server.mountpoint}}/{{item}}"
    replicas: "{{ s_sorted.msg |count}}"
    cluster: "{{ s_sorted.msg |join(',') }}"
    host: "{{ansible_default_ipv4.address}}"
    options: "{{storage_server.volume_options}}"
    start_on_create: no
  run_once: true
  with_items: storage_server.volumes
  when: env != "local"

# wait for cluster to assemble

- name: Storage - gluster - Start volumes
  gluster_volume:
   state: started
   name: "{{item}}"
  run_once: true
  with_items: storage_server.volumes
  when: env != "local"

# wait for volume to start

- name: Storage - gluster - Detach dead peers
  shell: "for i in $(/usr/sbin/gluster peer status |grep -B3 'Disconnected' |grep 'Hostname' |awk '{print $2}'); do /usr/sbin/gluster peer detach $i force; done"
  run_once: true
  when: env != "local"
